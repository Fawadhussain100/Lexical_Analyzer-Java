

//Name: Fawad Hussain
//Roll #: SP16-BCS-149(A)

package lexical_analysis;


import java.lang.*;
import java.util.*;
import java.io.*;

public class Main {

    public enum B {F, T};
    public enum Token {N, ID,Strings,Charr,Digit,SingleLineComment,MultiLineComment,Divide,
        LRBracket,LCBracket,LSBracket,RRBracket,RCBracket,RSBracket,Greater_sign,Mul,Plus,PlusPLus,PlusEqual,
        Minus,MinusMinus,MinusEqual,LessSign,NotEqual,EqualEqual,Assgin_op,And_op,OR_op,Res
    };

    public static ArrayList<String> token = new ArrayList<String>();
    public static ArrayList<Character> Error = new ArrayList<Character>();
    public static ArrayList<Character> lexeme = new ArrayList<Character>();
    public static int bcount = 0;
    public static char[] buffer = new char[4096];
    public static int[] COl = new int[129];
    public static String[] tokType={"N","ID","String","Char","Digit","SingleLine_Comment","MultiLine_Comment","Divide",
            "LRBracket","LCBracket","LSBracket","RRBracket","RCBracket","RSBracket",
            "Greater_sign","Mul","Plus","PlusPlus","PlusEqual","Minus","MinusMinus","MinusEqual","LessSign","NotEqual","EqualEqual",
            "Assgin_op","And_op","OR_op","Res"
    };




    public static void main(String[] args) throws Exception {





        int[][] TT = {

//              {0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128 }

                // state 0
                {
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //09
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //19
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //29
                  -1, -1, -1, -1,  3, -1, -1, -1, 48,  6, //39
                  25, 28, 32, 33, -1, 37, -1, 18, 10, 10, //49
                  10, 10, 10, 10, 10, 10, 10, 10, 46, -1, //59
                  41, 44, 31, -1,  1, -1, 63, 74, 89, 85, //69
                  56, -1, -1, 52, -1, -1, -1, -1, -1, -1, //79
                  -1, -1, -1, 68, -1, -1, 81, 91, -1, -1, //89
                  -1, 27, -1, 30, -1, -1, -1, -1, -1, -1, //99
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //109
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //119
                  -1, -1, -1, 26, 50, 29, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                // state 1
                {
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  //9
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  //19
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  //29
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  //39
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  //49
                 2, 2, 2, 2, 2, 2, 2, 2, 2,  2,  //59
                 2, 2, 2, 2,  1, 1, 1, 1, 1, 1,  //69
                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  //79
                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  //89
                 1, 2, 2, 2, 2, 2, 2, 1, 1, 1,  //99
                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  //109
                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  //119
                 1, 1, 1, 2, 2, 2, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                // state 2 for identifers
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.ID.ordinal()},

                // state 3
                {
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //9
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //19
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //29
                        3, 3, 3, 3, 5, 3, 3, 3, 3, 3,  //39
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //49
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //59
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,       //69
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //79
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //89
                        3, 3, 4, 3, 3, 3, 3, 3, 3, 3,  //99
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //109
                        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  //119
                        3, 3, 3, 3, 3, 3, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 4
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        56, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1,  3,  -1,  -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                         3, -1, -1, -1, 3, -1, 3, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 5 for strings
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Strings.ordinal()},


                //state 6

                {
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //9
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //19
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //29
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //39
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //49
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //59
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,       //69
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //79
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //89
                        8, 8, 7, 8, 8, 8, 8, 8, 8, 8,  //99
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //109
                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  //119
                        8, 8, 8, 8, 8, 8, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 7
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, 8, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        8, -1, -1, -1, 8, -1, 8, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 8
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1,  9,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 9 for Charactor
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Charr.ordinal()},


                //state 10
                {
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //9
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //19
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //29
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //39
                        17, 17, 17, 17, 17, 17, 11, 17, 10, 10,  //49
                        10, 10, 10, 10, 10, 10, 10, 10, 17, 17,  //59
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //69
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //79
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //89
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //99
                        17, 13, 17, 17, 17, 17, 17, 17, 17, 17,  //109
                        17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  //119
                        17, 17, 17, 17, 17, 17, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 11
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, 12, 12,  //49
                        12, 12, 12, 12, 12, 12, 12, 12, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 12
                {
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //9
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //19
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //29
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //39
                        16, 16, 16, 16, 16, 16, 16, 16, 12, 12,  //49
                        12, 12, 12, 12, 12, 12, 12, 12, 16, 16,  //59
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //69
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //79
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //89
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //99
                        16, 13, 16, 16, 16, 16, 16, 16, 16, 16,  //109
                        16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  //119
                        16, 16, 16, 16, 16, 16, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 13
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, 14, -1, 14, -1, -1, 14, 14,  //49
                        14, 14, 14, 14, 14, 14, 14, 14, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },


                //state 14
                {
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //9
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //19
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //29
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //39
                        15, 15, 15, 15, 15, 15, 15, 15, 14, 14,  //49
                        14, 14, 14, 14, 14, 14, 14, 14, 15, 15,  //59
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //69
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //79
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //89
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //99
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //109
                        15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  //119
                        15, 15, 15, 15, 15, 15, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 15 for Digit
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.Digit.ordinal()},

                //state 16 for Digit
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.Digit.ordinal()},

                //state 17 for Digit
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.Digit.ordinal()},

                //state 18
                {
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //9
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //19
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //29
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //39
                        24, 24, 21, 24, 24, 24, 24, 19, 24, 24,  //49
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //59
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //69
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //79
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //89
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //99
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //109
                        24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  //119
                        24, 24, 24, 24, 24, 24, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 19
                {
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //9
                        20, 19, 19, 20, 19, 19, 19, 19, 19, 19,  //19
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //29
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //39
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //49
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //59
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //69
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //79
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //89
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //99
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //109
                        19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  //119
                        19, 19, 19, 19, 19, 19, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 20 for single line comments
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.SingleLineComment.ordinal()},

                //State 21
                {
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 22, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal()
                },

                //state 22
                {
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 22, 21, 21, 21, 21, 23, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                        21, 21, 21, 21, 21, 21, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal()
                },

                //state 23 for Mulitline Comment
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.MultiLineComment.ordinal()},

                //state 24 for Divide
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.Divide.ordinal()},

                //state 25 for left round bracket
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.LRBracket.ordinal()},

                //state 26 for left Curly bracket
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.LCBracket.ordinal()},

                //state 27 for left Square bracket
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.LSBracket.ordinal()},

                //state 28 for right round bracket
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.RRBracket.ordinal()},

                //state 29 for right Curly bracket
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.RCBracket.ordinal()},

                //state 30 for right Square bracket
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.RSBracket.ordinal()},

                //state 31 for Greater Sign
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Greater_sign.ordinal()},

                //state 32 for Multiply
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Mul.ordinal()},

                //state 33
                {
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,35 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,36 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,
                        34 ,34 ,34 ,34 ,34 ,34 ,B.F.ordinal(), B.F.ordinal(), Token.N.ordinal()
                },

                //state 34 Plus
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.Plus.ordinal()},

                //state 35 plusplus
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.PlusPLus.ordinal()},

                //state 36 plusEqual
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.PlusEqual.ordinal()},

                //state 37
                {
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,39 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,40 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,38 ,
                        38 ,38 ,38 ,38 ,38 ,38 ,B.F.ordinal(), B.F.ordinal(), Token.N.ordinal()
                },

                //state 38 Minus
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.Minus.ordinal()},

                //state 39 MinusMinus
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.MinusMinus.ordinal()},

                //state 40 MinusEqual
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.MinusEqual.ordinal()},

                //state 41
                {
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,43 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,
                        42 ,42 ,42 ,42 ,42 ,42 ,B.F.ordinal(), B.F.ordinal(), Token.N.ordinal()
                },

                //state 42 LessSign
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.T.ordinal(), Token.LessSign.ordinal()},

                //state 43 NotEqual
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.NotEqual.ordinal()},


                //state 44
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, 45, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 45 for EqualEqual
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.EqualEqual.ordinal()},

                //state 46
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, 47, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 47 for Assign_op
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Assgin_op.ordinal()},

                //state 48
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, 49, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 49 for And_op
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.And_op.ordinal()},

                //state 50
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, 51, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 51 for OR_op
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.OR_op.ordinal()},

                //state 52
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        55, -1, -1, -1, -1, -1, -1, -1, 53, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 53
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, 54, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },



                //state 54 for INT
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //state 55 for IF
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //state 56
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, 57, -1, -1, 61,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 57
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, 58,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 58
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, 59, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 59
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, 60, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 60 for FLOAT
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //state 61
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, 62, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },


                //state 62 for FOR
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //State 63
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, 64, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 64
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, 65,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 65
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, 66, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 66
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, 67, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 67 for BREAK
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //State 68
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, 69, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 69
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, 70, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 70
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, 71, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 71
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, 72, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 72
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, 73, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 73 for SWITCH
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},



                //state 74
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, 78, -1, -1, -1, -1,  //69
                        -1, -1, 75, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },


                //state 75
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, 76, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 76
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, 77, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 77 for CHAR
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //state 78
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, 79, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 79
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, 80,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 80 for CASE
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //State 81
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, 82,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },


                //State 82
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, 83, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },


                //State 83
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, 84, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 84 VOID
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},


                //State 85
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, 86, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },


                //State 86
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, 87, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 87
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, 88,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 88 for ELSE
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //state 89
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, 90,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 90 for DO
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},

                //State 91
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, 92, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 92
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, 93, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State  93
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //69
                        -1, -1, -1, -1, -1, -1, 94, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //state 94
                {
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //9
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //19
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //29
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //39
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //49
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //59
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, 95,  //69
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //79
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //89
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //99
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //109
                        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  //119
                        -1, -1, -1, -1, -1, -1, B.F.ordinal(), B.F.ordinal(), Token.N.ordinal() //128
                },

                //State 95 for WHILE
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, B.T.ordinal(), B.F.ordinal(), Token.Res.ordinal()},




        };

        for (int c = 0;c<COl.length;c++)
        {
            COl[c]=c;
            //System.out.println(COl[c]);
        }

        //file Read
        readFile();

        //variable initalizetion
        int state = 0, lcount = 0,count;
        // lexme Array
        char[] lex = new char[100];


        // get charactor fromt the  buffer
        char ch = get_char_Buff();



        while (ch != (char) -1 )    // loop terminate when end of file charactor occur
        {
            // get state according to the transition table
            count = 0;

            while(count!=(int)ch)
            {
                count++;
            }
//            System.out.print(count);

            state = TT[state][count];

            if( state == -1)
            {

                Error.add(ch);
                //   System.out.println("ERROR :  " + ch);

                ch = get_char_Buff();
                state = 0;
                continue;
            }
            else
            {
 //               System.out.println(ch);
                lexeme.add(ch);
                lex[lcount] = ch;
//                System.out.println(lex[lcount]);
                lcount++;
            }

            if (TT[state][COl[126]] != 0 ) // when state is accepting
            {
                if (TT[state][COl[127]]!= 0) // when state is retracting
                {
                    retract();
                    lcount--;
                }
//                System.out.println(lcount);
//                System.out.println(bcount);
//                lex[lcount] = ch;
//                lcount++;
                lex[lcount] = '\0';
//                System.out.println(TT[state][COl[128]]);
                generateToken(TT[state][COl[128]], lex);
                state = 0;
                lex = new char[100];
                lcount = 0;
            }


 //           System.out.println("Type : " + getcharT(ch));
 //           System.out.println(ch);
            ch = get_char_Buff();

        }

        displayToken();
    //    outputFiles();

    }

    public static void retract()
    {
        bcount--;
    }

    public static void generateToken(int choice,char[] lexical) {
        int i = 0;

            String T = new String();
            while (lexical[i] != '\0') {
                T = T + lexical[i];
//              System.out.println(lexical[i]);
                i++;
            }
//           System.out.println(T);
            token.add("<" +  tokType[choice] +", " + T + " >");
            System.out.println();

    }


    public static void readFile() throws IOException {
        int i = 0;
        FileInputStream in = null;
        try {
            in = new FileInputStream("file");

            int c;
            while ((c = in.read()) != -1) {
                buffer[i] = (char) c;
                i++;
            }
            buffer[i] = (char) -1;
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        finally {
            if (in != null) {
                in.close();
            }
        }
    }



    public static char get_char_Buff() throws IOException {
        char i;
        i=buffer[bcount];
        bcount++;
        return i;
    }


    public static void displayToken()
    {
        System.out.println("Tokens");
        for (String tok : token)
        {
            System.out.println(tok);
            System.out.println();
        }

        System.out.println("ERRORS");
        for (char err : Error)
        {
            System.out.println("Error : " + err);
        }

        System.out.println("lexeme");
        for (char le : lexeme)
        {
            System.out.print(" " + le);
        }


    }

    public static void outputFiles() throws Exception
    {

        PrintWriter tokenFile = null;
        PrintWriter ErrorFile = null;
        try{
            tokenFile = new PrintWriter("Token_File.txt");
            ErrorFile = new PrintWriter("Error_File.txt");

            tokenFile.println("_______Generated Tokens_______");
            tokenFile.println();
            for (String tok : token)
            {
                tokenFile.println(tok);

            }

            ErrorFile.println("------Errors-------");
            ErrorFile.println();


            for (Character error : Error)
            {
                ErrorFile.println("Error" + error);
            }
        }
        catch (Exception e)
        {
            System.out.println(e);
        }

        tokenFile.close();
        ErrorFile.close();
    }

}
